{"ast":null,"code":"var _jsxFileName = \"/Users/entongliu/Documents/git/fullstackopen/part2/part2.12-2.14/src/components/country.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Country = _ref => {\n  _s();\n\n  let {\n    data: {\n      name,\n      capital,\n      population,\n      flags,\n      languages\n    }\n  } = _ref;\n  const [weather, setWeather] = useState({});\n\n  const getWindDirection = inputDegree => {\n    const dir = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\", \"N\"];\n    const directionsIdx = Math.round(inputDegree % 360 / 22.5) + 1;\n    const direction = directionsArr[directionsIdx];\n    return direction;\n  };\n\n  const windDirection = getWindDirection(weather.wind.deg);\n  useEffect(() => {\n    console.log('effect');\n    const params = {\n      q: capital[0],\n      appid: process.env.REACT_APP_API_KEY\n    };\n    axios.get('http://api.openweathermap.org/data/2.5/weather', {\n      params\n    }).then(response => {\n      console.log('promise fulfilled');\n      setWeather(response.data);\n      console.log(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  console.log({\n    weather\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: name.common\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"capital \", capital[0]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"population \", population]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Spoken languages:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.entries(languages).map(_ref2 => {\n        let [key, value] = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: value\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: flags.png,\n      alt: name,\n      width: \"100px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Weather in \", capital[0]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), Object.keys(weather).length !== 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"temperature: \", Math.round(weather.main.temp - 273.15), \" Celcius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"wind: \", Math.round(weather.wind.speed * 2.237), \" mph direction \", weather.wind.deg, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(Country, \"p44c62psaVm/fTquZwTezXTodIU=\");\n\n_c = Country;\nexport default Country;\n\nvar _c;\n\n$RefreshReg$(_c, \"Country\");","map":{"version":3,"sources":["/Users/entongliu/Documents/git/fullstackopen/part2/part2.12-2.14/src/components/country.js"],"names":["React","useEffect","useState","axios","Country","data","name","capital","population","flags","languages","weather","setWeather","getWindDirection","inputDegree","dir","directionsIdx","Math","round","direction","directionsArr","windDirection","wind","deg","console","log","params","q","appid","process","env","REACT_APP_API_KEY","get","then","response","catch","error","common","Object","entries","map","key","value","png","keys","length","main","temp","speed"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nconst Country = ({ data:{name, capital, population, flags, languages} }) => {\n  const [weather, setWeather] = useState({})\n  const getWindDirection = (inputDegree) =>{\n      const dir = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\",\"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\", \"N\"];\n      const directionsIdx = Math.round((inputDegree % 360) / 22.5) + 1;\n      const direction = directionsArr[directionsIdx];\n      return direction;\n  }\n\n  const windDirection = getWindDirection(weather.wind.deg);\n\n  useEffect(() => {\n    console.log('effect')\n    const params = {\n      q:capital[0],\n      appid: process.env.REACT_APP_API_KEY,\n      \n    }\n    axios\n      .get('http://api.openweathermap.org/data/2.5/weather',{params})\n      .then(response => {\n        console.log('promise fulfilled')\n        setWeather(response.data)\n        console.log(response.data)\n      }).catch(error => {\n        console.log(error);\n    })\n  }, [])\n  console.log({weather})\n  return (\n    <>\n      <h1>{name.common}</h1>\n      <p>capital {capital[0]}</p>\n      <p>population {population}</p>      \n      <h2>Spoken languages:</h2>\n      <ul>\n        {Object.entries(languages).map(([key, value]) =>(\n      \n\n          <li key = {key}>{value}</li>\n        ))}\n      \n      </ul>\n      <img src={flags.png} alt={name} width='100px'/>\n      <h2>Weather in {capital[0]}</h2>\n      {Object.keys(weather).length!==0 &&(\n        <>\n          <h4>temperature: {Math.round(weather.main.temp - 273.15)} Celcius</h4>\n          <h4>wind: {Math.round(weather.wind.speed * 2.237)} mph direction {weather.wind.deg} </h4>\n        </>\n      )}\n\n    </>\n  )\n}\n\n\nexport default Country"]},"metadata":{},"sourceType":"module"}