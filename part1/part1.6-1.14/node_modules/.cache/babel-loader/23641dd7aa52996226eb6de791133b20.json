{"ast":null,"code":"var _jsxFileName = \"/Users/entongliu/Documents/git/fullstackopen/part1/part1.6-1.14/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StatisticLine = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.text, \" \", props.value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 11\n  }, this);\n};\n\n_c = StatisticLine;\n\nconst Statistics = props => {\n  const {\n    good,\n    bad,\n    neutral\n  } = props;\n\n  if (good + neutral + bad === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No feedback given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"good\",\n      value: good\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"netural\",\n      value: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"bad\",\n      value: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"all\",\n      value: good + neutral + bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"average\",\n      value: (good - bad) / (good + neutral + bad)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"positive\",\n      value: good / (good + neutral + bad) * 100 + '%'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = Statistics;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handGoodClick = () => {\n    setGood(good + 1);\n  };\n\n  const handleNeturalClick = () => {\n    setNeutral(neutral + 1);\n  };\n\n  const handleBadClick = () => {\n    setBad(bad + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handGoodClick,\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleNeturalClick,\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleBadClick,\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      bad: bad,\n      neutral: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c3 = App;\n\nconst Button = _ref => {\n  let {\n    handleClick,\n    text\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = Button;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StatisticLine\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"App\");\n$RefreshReg$(_c4, \"Button\");","map":{"version":3,"sources":["/Users/entongliu/Documents/git/fullstackopen/part1/part1.6-1.14/src/App.js"],"names":["React","useState","StatisticLine","props","text","value","Statistics","good","bad","neutral","App","setGood","setNeutral","setBad","handGoodClick","handleNeturalClick","handleBadClick","Button","handleClick"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n\nconst StatisticLine = props => {\n        return (\n          <div>{props.text} {props.value}</div>\n        )\n  }\n\nconst Statistics = (props) =>{\n  const{good,bad,neutral} = props\n  if (good+neutral+bad === 0) {\n    return (\n      <div>\n        No feedback given\n      </div>\n    )\n  }\n  return (\n    <>\n          <StatisticLine text='good' value={good}/>\n          <StatisticLine text='netural' value={neutral}/>\n          <StatisticLine text='bad' value={bad}/>\n          <StatisticLine text='all' value={good+neutral+bad}/>\n          <StatisticLine text='average' value={(good-bad)/(good+neutral+bad)}/>\n          <StatisticLine text='positive' value={((good / (good + neutral + bad)) * 100 + '%')}/>\n\n    </>\n  )\n}\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const handGoodClick = () => {\n    setGood(good + 1)\n  }\n\n  const handleNeturalClick = () => {\n    setNeutral(neutral + 1)\n  }\n  const handleBadClick = () => {\n    setBad(bad + 1)\n  }\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button handleClick={handGoodClick} text='good'/>\n      <Button handleClick={handleNeturalClick} text='neutral'/>\n      <Button handleClick={handleBadClick} text='bad'/>\n      <h1>statistics</h1>\n      <Statistics good={good} bad={bad} neutral={neutral} />\n    </div>\n  )\n}\n\nconst Button = ({handleClick, text}) => \n  (\n    <button onClick={handleClick}>\n      {text}\n    </button>\n  )\n\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}